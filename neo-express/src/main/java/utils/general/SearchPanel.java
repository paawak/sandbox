/*
 * SearchPanel.java
 *
 * Created on December 13, 2003, 15:51 PM
 *
 *
 *This is a modified version of the SearchPanel: 
 *especially made for MachExpress
 */

package utils.general;

import java.util.*;
import javax.swing.*;
import javax.swing.JOptionPane;
import java.sql.*;

/**
 *
 * @author paawak
 */


public class SearchPanel extends javax.swing.JPanel {
    
    public boolean ListDoubleClicked = false;

    /** 
     *
     *Creates new form SearchPanel 
     *The following parameters need to be passed
     *ListArray: the array with which the list is to be populated
     *
     */
    public SearchPanel(Object[][] ListArray, String[] SearchOptions) {
        this.ListArray=ListArray;
        this.SearchOptions = SearchOptions;
        initComponents();
        search();
    }
    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        cbSearch = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSearch = new javax.swing.JList();
        btViewRecord = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.TitledBorder(null, "Search By : ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(37, 14, 4)));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        cbSearch = new javax.swing.JComboBox(SearchOptions);
        cbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSearchActionPerformed(evt);
            }
        });
        cbSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSearchItemStateChanged(evt);
            }
        });
        cbSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cbSearchMouseReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 2);
        add(cbSearch, gridBagConstraints);

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 2);
        add(txtSearch, gridBagConstraints);

        listSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listSearchKeyReleased(evt);
            }
        });
        listSearch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSearchValueChanged(evt);
            }
        });
        listSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSearchMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(listSearch);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 2);
        add(jScrollPane2, gridBagConstraints);

        btViewRecord.setText("View Record");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        add(btViewRecord, gridBagConstraints);

    }//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
        
        cbSearch.setSelectedIndex(0);
        
    }//GEN-LAST:event_formComponentShown

    private void cbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSearchActionPerformed
        // Add your handling code here:
        key=""; 
            txtSearch.setText("");

        search();               
    }//GEN-LAST:event_cbSearchActionPerformed

    private void listSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSearchMouseClicked
        // Add your handling code here:
 if(!listSelectionChanged){
        listClicked2+=evt.getClickCount();     
 }//end if
 else if(listSelectionChanged){
    listClicked2=0;
    listSelectionChanged=false;
 }//end else  
                
    }//GEN-LAST:event_listSearchMouseClicked

    private void listSearchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSearchValueChanged
        // Add your handling code here:
                txtSearch.setText(""+listSearch.getSelectedValue());
                txtSearch.selectAll();
                listSelectionChanged=true;
        
    }//GEN-LAST:event_listSearchValueChanged

    private void listSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listSearchKeyReleased
        // Add your handling code here:

    }//GEN-LAST:event_listSearchKeyReleased

    private void listSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listSearchKeyPressed

        
    }//GEN-LAST:event_listSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // Add your handling code here:
        int keyCode=evt.getKeyCode();
        
        if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );

       listSearch.requestFocus();
}//end if
if(keyCode==evt.VK_RIGHT||keyCode==evt.VK_HOME||keyCode==evt.VK_END||keyCode==evt.VK_LEFT )
    ;//blank stat
else
      if(key.length()>0){
                txtSearch.setText(""+listSearch.getSelectedValue());
              //System.out.println("key = \t"+key);
      txtSearch.setSelectionStart( key.length() );
      }//end if
                
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // Add your handling code here:
        char keyChar=evt.getKeyChar();
        int keyCode=evt.getKeyCode();
if(key.equals("")&&keyCode==evt.VK_BACK_SPACE)
    ;//blank statement
        else if(keyCode==evt.VK_BACK_SPACE){
sb= new StringBuffer(key);
sb.setLength(sb.length()-1);
key=sb.toString();
}//end if 
else if(keyCode==evt.VK_ENTER){
   click=true;
   //searchCancelPressed();
//         modifyPressed();


}//end else if 1
        else if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP||keyCode==evt.VK_BACK_SPACE ||keyCode==evt.VK_DELETE   ||keyCode==evt.VK_SPACE ||keyCode==evt.VK_CAPS_LOCK ||keyCode==evt.VK_SHIFT||keyCode==evt.VK_TAB || keyCode==evt.VK_PAGE_DOWN || keyCode==evt.VK_PAGE_UP){ 
    ;
}//end else if 3
        else if(keyCode==evt.VK_ALT || keyCode==evt.VK_CONTROL){ 
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );

}//end else if 3        
        else if(keyCode==evt.VK_RIGHT||keyCode==evt.VK_HOME||keyCode==evt.VK_END||keyCode==evt.VK_LEFT ){ 
    //txtSearch.setSelectionStart(txtSearch.getText().length());
            ;
}//end else if 3        
else if(keyCode>=32&&keyCode<=93||keyCode>=95&&keyCode<=126){
key+=String.valueOf(keyChar); 
key=key.trim();
search();
}//end else if 2
else
  JOptionPane.showMessageDialog(this," Enter valid chararters ","ERROR!",JOptionPane.INFORMATION_MESSAGE);    
        
    }//GEN-LAST:event_txtSearchKeyPressed

    private void cbSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSearchItemStateChanged
        // Add your handling code here:
        key=""; 
            txtSearch.setText("");

        search();               
    }//GEN-LAST:event_cbSearchItemStateChanged

    private void cbSearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbSearchMouseReleased
        // Add your handling code here:
        key=""; 
            txtSearch.setText("");

        search();               
    }//GEN-LAST:event_cbSearchMouseReleased

    /**
     *
     *Method to obtain a sorted one-dimensional array from the raw two-dimensional array present in the table.
     *Parameters passed:
     *1.Object[][] rawData: two-dimensional array containing raw data
     *2.int rows: no. of rows in the table
     *3.int colNo: the index of the column which is to be sorted
     *
     */ 
public void  sortStrings(Object[][] rawData,int rows,int colNo){
  
     try{
     list.removeAllElements(); 
     } 
     catch(Exception e){
         System.out.println(e);
     }
     //SORTS THE CONTENTS IN ASCENDING ORDER
    sorted=new String[rows];

    unsorted=new String[rows];

    
     for(int j=0;j<rows;j++){       
         unsorted[j]=((String)(rawData[j][colNo])).trim();
         sorted[j]=unsorted[j];
        
     }


        
     for(int j=0;j<rows;j++){         //outer loop
         
         for(int i=j+1;i<rows;i++){         //inner loop
             
             if(sorted[i].compareToIgnoreCase(sorted[j]) <0){
                 
                 String temp = sorted[j];
                 sorted[j]=sorted[i];
                 sorted[i]=temp;
             }//end if
         }//end inner loop
             
     }//end outer loop
     
     for(int j=0;j<rows;j++){         
         list.addElement(sorted[j]);
           listSearch.setListData(list);
         
     }
    
 }//end sortStrings methd.  
    

/***
 *
 *Method to highlight the search element typed in the "Search" JTextField(if it exists) 
 *in the parent-JTable
 *
 */
public void displaySearch(){
    
    for(int i=0;i<sorted.length;i++){
        
    if( sorted[i].regionMatches( true,0,key,0,key.length() ) ){

    listSearch.setSelectedValue(sorted[i],true);

int index=searchElement(sorted[i],unsorted);
            eleFound=true;           
        break;
        }//end if*/
    
    }//end for
    
    if(!eleFound){
  JOptionPane.showMessageDialog(this," No match found. ","Sorry!",JOptionPane.INFORMATION_MESSAGE);    
  if(key.length()==1){
  listSearch.setSelectedIndex(0);
  txtSearch.setText(""+listSearch.getSelectedValue());
  txtSearch.selectAll();
  txtSearch.requestFocus();
  key="";
  
  }//end if
  else{
sb= new StringBuffer(key);
if(sb.length()>1)
sb.setLength(sb.length()-1);
key=sb.toString();    
displaySearch();
txtSearch.setSelectionStart(key.length());
  }//end else
    }//end if
 
    eleFound=false;
}//end displaySearch methd.


/**
 *
 *Method to find if the letters typed in yhe "Search"JTextField exists in the table.
 *If it exists, it is highlent-JTable.
 *Otherwise, a suitable message is displayed
 */
public void search(){

          
          try{

              TableRows=ListArray.length;
               	
          }catch(Exception e){
          	
          	System.out.println("ERROR IN SearchPanel1_0 connection with database details:\n\t"+e);
          }
          
          
            list=new Vector(TableRows);
            
    
    /*if( SearchOptions[0].equals( cbSearch.getSelectedItem() ) )
            sortStrings(ListArray,TableRows,0); 
    else*/
            sortStrings(ListArray,TableRows,cbSearch.getSelectedIndex()); 
            

       displaySearch();

        txtSearch.requestFocus();
        

}//end search methd.


/**
 *Method to find the index the of an element "key" in an one-dimensional String array "a"
 *
 *Parameters passed:
 *1.String key
 *2.String[] a
 *
 */
public int searchElement(String key,String[] a){
    int indx=-1;
    for(int i=0;i<a.length;i++){
        if( key.equals(a[i]) )
            indx=i;
    }//end for
    
    
    return indx;
}//end searchElement


/**
 *
 *Conviniebce method to take appropriate actions when "Search Cancel"JButton is pressed
 */
public void searchCancelPressed(){
cbSearch.setSelectedItem(SearchOptions[0]);
list.removeAllElements();
//pnlSearch.setVisible(false);
//txtSearch.setText("");

this.setVisible(false);
    
}


    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btViewRecord;
    public javax.swing.JComboBox cbSearch;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JList listSearch;
    public javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private Vector list;    
    
    private String[] sorted;
    
    private String[] unsorted;
    
    private String key = "";
    
    private StringBuffer sb;
    
    private boolean eleFound = false;
    
    private int TableRows = 0;
    
    private Object[][] ListArray;
    
    private boolean listSelectionChanged = false;
    
    private int listClicked2 = 0;
    
    private boolean click = false;
    
    private int selrow = 0;
    
    private String[] SearchOptions;
    
}

